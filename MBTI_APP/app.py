# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-_BPCiTFmrSSjKbEWxmZ72zA1r_TyyZ_
"""

import streamlit as st
import joblib
import os

# === KONFIGURASI HALAMAN ===
st.set_page_config(page_title="MBTI Personality", page_icon="🧠", layout="centered")

# === CSS: TEMA MINIMALIS ELEGAN DENGAN BACKGROUND GRADIENT ===
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');

    html, body, .main, .block-container {
        background-color: white;
        font-family: 'Poppins', sans-serif;
        min-height: 100vh;
    }

    h1, h2, h3 {
        color: #AD1457;
    }

    .stButton > button {
        background-color: #F48FB1 !important;
        color: white !important;
        padding: 0.65em 2em;
        border-radius: 12px;
        border: none;
        font-weight: 600;
        font-size: 16px;
        transition: all 0.3s ease-in-out;
        margin-top: 10px;
        display: block;
        box-shadow: 0 4px 10px rgba(0,0,0,0.08);
    }

    .stButton > button:hover {
        background-color: #EC407A !important;
        transform: translateY(-2px);
        box-shadow: 0 6px 15px rgba(0,0,0,0.1);
    }

    .result-box {
        background-color: #fce4ec;
        padding: 25px;
        border-radius: 10px;
        text-align: center;
        margin-top: 25px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
    }

    .desc-box {
        background-color: #fff0f5;
        padding: 20px;
        border-radius: 10px;
        margin-top: 15px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
    </style>
""", unsafe_allow_html=True)

# === DESKRIPSI TIPE MBTI ===
mbti_descriptions = {
    "ENFP": "🎉 ENFP (The Campaigner): Energetic, enthusiastic, creative, and sociable. Loves exploring new ideas and possibilities.",
    "INFP": "🌸 INFP (The Mediator): Idealistic, loyal to their values, empathetic, and deeply introspective.",
    "INFJ": "🧠 INFJ (The Advocate): Insightful, inspiring, and driven by strong values and a desire to help others.",
    "INTJ": "📐 INTJ (The Architect): Strategic thinkers with a plan for everything, independent and determined.",
    "ENTP": "🗣️ ENTP (The Debater): Innovative, curious, and loves intellectual challenges and debates.",
    "ENTJ": "👔 ENTJ (The Commander): Bold, efficient, natural leaders who enjoy setting and achieving big goals.",
    "INTP": "🔬 INTP (The Thinker): Analytical, logical, and highly curious about how things work.",
    "ISFP": "🎨 ISFP (The Adventurer): Sensitive, artistic, and enjoys living in the present moment.",
    "ISTP": "🔧 ISTP (The Virtuoso): Bold and practical experimenters, masters of tools and techniques.",
    "ISFJ": "🛡️ ISFJ (The Defender): Loyal, warm, and detail-oriented. Cares deeply for others.",
    "ISTJ": "📘 ISTJ (The Logistician): Responsible, organized, and values tradition and rules.",
    "ESFP": "🎭 ESFP (The Entertainer): Spontaneous, energetic, and loves to entertain and have fun.",
    "ESTP": "🏎️ ESTP (The Entrepreneur): Energetic, perceptive, and thrives in fast-paced environments.",
    "ESFJ": "💞 ESFJ (The Consul): Caring, popular, and always eager to help others.",
    "ESTJ": "🗂️ ESTJ (The Executive): Practical, realistic, and great at managing people and tasks.",
    "ENFJ": "🌟 ENFJ (The Protagonist): Charismatic leaders who inspire others and care deeply about community."
}

# === KELAS PREDIKTOR ===
class MBTIPredictor:
    def __init__(self, model_bundle):
        self.model_bundle = model_bundle

    def predict_one(self, text):
        mbti = ''
        for dim in ['IE', 'NS', 'TF', 'JP']:
            bundle = self.model_bundle[dim]
            vec = bundle['vectorizer'].transform([text])
            vec = bundle['selector'].transform(vec)
            pred = bundle['model'].predict(vec)
            label = bundle['label_encoder'].inverse_transform(pred)[0]
            mbti += label
        return mbti

# === LOAD MODEL ===
@st.cache_resource
def load_model():
    if not os.path.exists("model/mbti_complete_model.pkl"):
        st.error("❌ Model file not found. Make sure 'model/mbti_complete_model.pkl' is available.")
        return None
    model_bundle = joblib.load("model/mbti_complete_model.pkl")
    return model_bundle['mbti_predictor']

predictor = load_model()

# === HEADER ===
st.markdown("""
    <h1 style='text-align:center;'>MBTI Personality Detector</h1>
    <p style='text-align:center; font-size:18px;'>Tell us about yourself, and we'll reveal your MBTI personality type based on your words.</p>
    <p style='text-align:center; color:#C2185B; font-weight:bold;'>📝 English input only.</p>
""", unsafe_allow_html=True)

# === INPUT TEXT ===
user_input = st.text_area("✏️ Write about yourself:", height=200, placeholder="e.g. I enjoy helping people, I love meaningful conversations, and I prefer calm over chaos...")

# === TOMBOL SATU-SATUNYA ===
if st.button("🔍 Predict MBTI Type"):
    if predictor is None:
        st.error("❌ Model not loaded.")
    elif user_input.strip() == "":
        st.warning("⚠️ Please enter some text first.")
    else:
        result = predictor.predict_one(user_input)
        st.markdown(f"<div class='result-box'><h2>Your MBTI Type:</h2><h1 style='font-size:48px; color:#D81B60;'>{result}</h1></div>", unsafe_allow_html=True)

        if result in mbti_descriptions:
            st.markdown(f"<div class='desc-box'><p style='font-size:18px;'>{mbti_descriptions[result]}</p></div>", unsafe_allow_html=True)
        else:
            st.warning("❓ No description available for this type.")

# === FOOTER ===
st.markdown("---")
st.markdown("<p style='text-align:center; font-size:13px;'>Made with by <b>Fitrotul Faizah</b> | 22.11.5021 | Final Project</p>", unsafe_allow_html=True)